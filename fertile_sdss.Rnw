% File SDSS2020_SampleExtendedAbstract.tex
\documentclass[10pt]{article}
\usepackage{sdss2020} % Uses Times Roman font (either newtx or times package)
\usepackage{hyperref}
\usepackage{latexsym}
\usepackage{amsmath, amsthm, amsfonts}
\usepackage{algorithm, algorithmic}  
\usepackage{graphicx}
\usepackage{xspace}
%\usepackage[T1]{fontenc}

% custom macros

\newcommand{\R}{\textsf{R}\xspace}
\newcommand{\RStudio}{\textsf{RStudio}\xspace}
\newcommand{\cmd}[1]{\texttt{#1}}
\newcommand{\pkg}[1]{\texttt{#1}}

\title{Creating optimal conditions for reproducible data analysis in R with \pkg{fertile}}

\author{
  Audrey M. Bertin \\
  Statistical and Data Sciences \\ 
  Smith College \\
  {\tt abertin@smith.edu} \\\And
  Benjamin S. Baumer \\
  Statistical and Data Sciences \\ 
  Smith College \\
  {\tt bbaumer@smith.edu}
}
  

\date{}

\begin{document}
\maketitle
\begin{abstract}
The advancement of scientific knowledge increasingly depends on ensuring that data-driven research is reproducible: that two people with the same data obtain the same results. However, while the necessity of reproducibility is clear, there are significant behavioral and technical challenges that impede its widespread implementation, and no clear consensus on standards of what constitutes reproducibility in published research. We focus on a series of common mistakes programmers make while conducting data science projects in R, primarily through the RStudio integrated development environment. \pkg{fertile} is an R package that operates in two modes: proactively (to prevent reproducibility mistakes from happening in the first place), and retroactively (analyzing code that is already written for potential problems). Furthermore, \pkg{fertile} is designed to educate the user about why the mistakes are problematic, and how to fix them. We discuss experimental results from testing \pkg{fertile} in an introductory data science course.
\end{abstract}

{\bf Keywords:} reproducibility, statistical software, workflow, collaboration

\section{Introduction}

Data-based research cannot be fully \emph{reproducible} unless the requisite code and data files produce identical results when run by another analyst. 
As research is becoming increasingly data-driven, and because knowledge can be shared worldwide so rapidly, reproducibility is critical to the advancement of scientific knowledge.

When researchers provide the code and data used for their work in a well-organized and reproducible format, readers are more easily able to determine the veracity of any findings by following the steps from raw data to conclusions. 
The creators of reproducible research can more easily receive more specific feedback (including bug fixes) on their work. Moreover, others interested in the research topic can use the code to apply the methods and ideas used in one project to their own work with minimal effort.

However, while the necessity of reproducibility is clear, there are significant behavioral and technical challenges that impede its widespread implementation, and no clear consensus on standards of what constitutes reproducibility in published research \cite{peng2009bio}. Not only are the \emph{components} of reproducible research up for discussion (e.g., need the software be open source?), but the corresponding \emph{recommendations} for ensuring reproducibility also vary (e.g., should raw and processed data files be in separate directories?).

Much of the discussion around reproducibility is also generalized---it is written to be applicable to users working with a variety of statistical software programs. Since all statistical software programs operate differently, generalized recommendations on reproducibility are often shallow and unspecific. While they provide useful guidelines, they can often be difficult to implement, particularly to new analysts who are unsure how to apply such recommendations within the software programs they are using.
Thus, reproducibility recommendations tailored to specific software programs are more likely to be adopted. 

In this paper, we focus on reproducibility in the R programming language with a concentration on projects that use the RStudio integrated development environment.
R is an ideal candidate for reproducibility recommendations due to the language's popularity for statistical analyses and the ease with which analysts can download and begin using the software.  

\section{Methods}

We present an R package called \href{https://github.com/baumer-lab/fertile}{\pkg{fertile}}\footnote{The authors gratefully acknowledge contributions from Hadley Wickham, Jenny Bryan, Greg Wilson, Edgar Ruiz, and other members of the `tidyverse` team.}, which focuses on a series of common mistakes programmers make while conducting data science research in R.
\pkg{fertile} operates in two modes: proactively (to prevent reproducibility mistakes from happening in the first place), and retroactively (analyzing code that has already been written for potential problems). 
\pkg{fertile} is available for download at \url{https://github.com/baumer-lab/fertile}.



\subsection{Proactive use}

Proactively, the package identifies potential mistakes as they are made by the user and outputs an informative message as well as a recommended solution. For example, \pkg{fertile} catches when a user passes a potentially problematic file path---such as an absolute path, or a path that points to a location outside of the project directory---to a variety of common input/output functions. 

<<include=FALSE>>=
readr::write_csv(mtcars, "~/Desktop/my_data.csv")
@

<<message = FALSE>>=
library(fertile)
file.exists("~/Desktop/my_data.csv")
read.csv("~/Desktop/my_data.csv")
@

\pkg{fertile} is even more aggressive with functions (like \cmd{setwd()}) that are almost certain to break reproducibility---it causes them to throw errors.

<<message=FALSE>>=
setwd("~/Desktop")
@



The proactive features are activated immediately after loading the \pkg{fertile} package and require no additional effort by the user.


In addition to the interactive warning system, \pkg{fertile} provides several useful utility functions. Among other things, these include functions to check the type of a file and a way to create a copy of a project in a temporary directory.

<<message=FALSE>>=
is_path_portable("~")

is_data_file("~/Desktop/my_data.csv")
@


\subsection{Retroactive use}

Retroactively, \pkg{fertile} analyzes potential obstacles to reproducibility in an RStudio Project (i.e., a directory that contains an \cmd{.Rproj} file), including the directory structure, the analyst's use of file paths, randomness, etc. \pkg{fertile} creates reproducibility reports that identify potential mistakes and provide recommendations for remedies. For example, \pkg{fertile} might identify the use of randomness in code and recommend setting a seed.



Users can access the majority of \pkg{fertile}'s retroactive features through two primary functions.

The \cmd{proj\_check()} function runs fifteen different reproducibility tests, noting which ones passed, which ones failed, the reason for failure, a recommended solution, and a guide to where to look for help. These tests include: looking for a clear build chain, checking to make sure the root level of the project is clear of clutter, confirming that there are no files present that are not being directly used by or created by the code, and looking for uses of randomness that to not have a call to \cmd{set.seed()} present. Subsets of the fifteen tests can be invoked using the select helper functions from \pkg{dplyr} and the \cmd{check\_some()} function.

<<eval=FALSE, include=FALSE>>=
knitr::write_bib("dplyr", file = "pkgs.bib")
@

<<message=FALSE>>=
library(tidyverse)
check_some(".", contains("paths"))
@



The \cmd{proj\_analyze()} function creates a report documenting the structure of a data analysis project. This report contains informations about all packages referenced in code, the files present in the directory and their types, suggestions for moving files to create a more organized structure, and a list of reproducibility-breaking file paths used in code.



\section{Results}

In an effort to understand the package's effectiveness, we also share preliminary results from a randomized, controlled experiment conducted on an undergraduate introductory data science course\footnote{This study is approved by Smith College IRB, Protocol \#19-032}. The purpose of the study is to determine whether \pkg{fertile} helps students produce data science research that is more likely to be reproducible. 

\section{Conclusion}

\pkg{fertile} is an R package that lowers barriers to reproducible data analysis projects in R. 
The features of \pkg{fertile} can be accessed almost effortlessly, making it easy for data analysts of all skill levels and backgrounds to gain a better understanding of how to make their work reproducible.
\pkg{fertile} is designed to educate the user about why the mistakes are problematic and how to fix them, promoting a greater understanding of reproducibility concepts in its users.
It is written for a wide audience, simple enough to be used by students in an introductory data science course, but still helpful to experienced analysts.
\pkg{fertile} also addresses a human challenge of reproducibility. In the moment, it often feels easiest to take a shortcut---to use an absolute path or change a working directory. However, when considering the long term path of a project, spending the extra time to improve reproducibility is worthwhile. \pkg{fertile}'s user-friendly features can help data analysts avoid these harmful shortcuts with minimal effort.


\bibliographystyle{sdss2020} % Please do not change the bibliography style
\bibliography{bibliography,pkgs}

\end{document}